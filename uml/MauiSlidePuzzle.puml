@startuml MauiSlidePuzzle

class SlidePuzzleView
{
    '- puzzle : SlidePuzzle
    ~ PanelViews : List<SlidePanelView>
    ~ BlankPanelView : BlankPanelView
    - skImage : SKImage
    ~ SlidePuzzleView(width : double, height : double)
    ~ SetImageSource(embeddedImageSource : String) : void
    ~ ClearImageSource() : void
    ~ Initialize(model : SlidePuzzle) : void
    ~ ConvertLocToTrans(location : Point) : Point
    '~ ShuffleAsync(count : int) : Task
}

abstract SlidePanelView
{
    + ID : int
    + Translation : Point
    ~ IsMoving : bool <<get only>>
    # isMoving : bool
    - imagePanel : ClipImagePanel
    - gv : GraphicsView <<read only>>
    # SlidePanelView(image : IImage, clipRect : RectF, id : int)
    '# AddTapRecognizer(tapped : Action<SlidePanelView>) : void
    {abstract} ~ DrawPanelFrame(canvas : ICanvas, clipRect : RectF) : void
    '{abstract} ~ SetTappedNotifier(tapped : Action<SlidePanelView>) : void
    {abstract} ~ MoveTo(point : Point, length : uint) : Task
    ~ Shake(amplitude : double, length : uint) : Task
}

class ImagePanelView
{
    ' - panel : ImagePanel
    ' - isBlank : bool
    ' ~ ImagePanelView(panel : ImagePanel)
    ' ~ SetAsBlank() : void
}

class BlankPanelView
{

}

class PanelFrameDrawable
{
    '- image : IImage <<read only>>
    - clipRect : RectF <<read only>>
    + DrawFrame : Action<ICanvas, RectF>
}

class SlidePuzzle
{
    + Rows : int <<read only>>
    + Columns : int <<read only>>
    + Panels : List<SlidePanel> <<read only>>
    + BlankPanel : SlidePanel <<read only>>
    ' - panels : List<ImagePanel>
    ' - blankPanel : ImagePanel
    ~ SlidePuzzle(rows : int, columns : int)
    ~ Shuffle(counts : int) : IEnumerable<SlidePanel>
    - Shuffle() : IEnumerable<SlidePanel>
    ~ Reset() : void
    ~ TryMove(panel : SlidePanel) : bool
    - GetNeighbors(panel : SlidePanel) : List<SlidePanel>
    ~ IsCompleted() : bool
}

class SlidePanel
{
    - initialLocation : Point <<read only>>
    + ID : int
    + Location : Point
    ~ SlidePanel(initialLocation : Point, id : int)
    ~ SwapLocation(targetPanel : SlidePanel) : void
    ~ IsInitialLocation() : bool
}

class SlidePuzzleController
{
    - view : SlidePuzzleView <<read only>>
    - model : SlidePuzzle <<read only>>
    ~ SlidePuzzleController(view : SlidePuzzleView, model : SlidePuzzle)
    ~ Initialize() : void
    - EnablePanelTap() : void
    - DisablePanelTap() : void
    ~ ShuffleAsync(counts : int) : Task
    ~ ResetAsync() : Task 
    - PanelTapped(panelView : SlidePanelView) : void
    '- ViewTapped() : void
    '- SwapPanelTranslatinoAsync(imagePanelView : ImagePanelView, blankPanelView : BlankPanelView, length : uint) : Task
}

class MainPage
{
    + CurrentStageInfo : StageInfo
    - stageList : List<StageInfo>
    - controller : SlidePuzzleController <<read only>>
    + MainPage()
    - PrepareNewStage() : void
}

class StageInfo <<Observable Object>>
{
    StageName : string
    ImageFilename : string
    Rows : int
    Columns : int
    EmbeddedImagePath : string
    ShuffleCounts : int
}

' arrows
ImagePanelView -up-|> SlidePanelView
BlankPanelView -up-|> SlidePanelView

SlidePanelView -right-> PanelFrameDrawable

MainPage --> SlidePuzzleView
MainPage ..> SlidePuzzle : <create> 
MainPage --> SlidePuzzleController

SlidePuzzle *.down. "many" SlidePanel
SlidePuzzleView *.down. "many" SlidePanelView

SlidePuzzleController -left-> SlidePuzzleView
SlidePuzzleController -right-> SlidePuzzle

MainPage -right-> StageInfo

@enduml

@startuml AppStates
title AppStates
hide empty description
[*] -> Initialized
Initialized -> OnGamePreparing
state OnGame {
    state OnGamePreparing {
    }
    OnGamePreparing --> OnGameReady
    OnGameReady -> OnGamePlay : StartClicked
    OnGamePlay --> OnGameReset : ResetClicked
    OnGameReset --> OnGamePlay : await ResetAsync
    OnGamePlay -> OnGameReady : OnCompleted
}
OnGame --> OnGamePreparing : PrevStageClicked / \nNextStageClicked / \nReloadStageClicked
@enduml

@startuml AppStates.CompletedMessage
title AppStates.CompletedMessage
hide empty description
[*] -> Default
Default --> OnGameCompleted : OnCompleted
OnGameCompleted --> Default : StartClicked / \nPrevStageClicked / \nNextStageClicked
@enduml

@startuml AppStates.CurrentStageImage
title AppStates.CurrentStageImage
hide empty description
[*] -> Default
Default --> OnGameReady : PrepareNewStage
OnGameReady --> Default : StartClicked
Default --> OnGameCompleted : OnCompleted
OnGameCompleted --> Default : StartClicked
@enduml